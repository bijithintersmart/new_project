import PDFDocument from "pdfkit";
import axios from "axios";
import { Worker } from "worker_threads";

export const generatePdf = async (req, res) => {
  try {
    const user = req.user;
    const doc = new PDFDocument();
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${user.name}_profile.pdf`
    );
    doc.pipe(res);
    doc.fontSize(20).text("User Profile", { align: "center" });
    doc.moveDown();
    doc.fontSize(12).text(`Name: ${user.name}`);
    doc.text(`Email: ${user.email}`);
    doc.text(`Account Status: ${user.isBlocked ? "Blocked" : "Active"}`);
    doc.text(`Created At: ${new Date(user.createdAt).toLocaleString()}`);
    doc.text(`Updated At: ${new Date(user.updatedAt).toLocaleString()}`);
    doc.moveDown();
    if (user.image) {
      try {
        const imageResponse = await axios.get(user.image, {
          responseType: "arraybuffer",
        });
        doc.image(imageResponse.data, {
          fit: [250, 250],
          align: "center",
          valign: "center",
        });
      } catch (error) {
        console.error("Error fetching or processing image:", error);
      }
    }
    doc.fontSize(10).text("Generated by Gemini", { align: "center" });
    doc.end();
  } catch (error) {
    console.error(error);
    res.status(500).send("Error generating PDF");
  }
};

export const generatePdfFromData = async (req, res) => {
  try {
    const { title, content } = req.body;
    if (!title || !content) {
      return res.status(400).send("Title and content are required");
    }
    const doc = new PDFDocument();
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", `attachment; filename=${title}.pdf`);
    doc.pipe(res);
    doc.fontSize(25).text(title, { align: "center" });
    doc.moveDown();
    doc.fontSize(12).text(content);
    doc.end();
  } catch (error) {
    console.error(error);
    res.status(500).send("Error generating PDF");
  }
};

export const generatePdfFromHtml = async (req, res) => {
  try {
    const { htmlContent } = req.body;

    if (!htmlContent) {
      return res.status(400).send("HTML content is required");
    }

    const worker = new Worker("./src/workers/pdfWorker.js", {
      workerData: { htmlContent },
    });

    worker.on("message", (pdfBuffer) => {
      if (pdfBuffer.error) {
        console.error("Error from PDF worker:", pdfBuffer.error);
        return res.status(500).send("Error generating PDF from HTML");
      }
      res.setHeader("Content-Type", "application/pdf");
      res.setHeader(
        "Content-Disposition",
        "attachment; filename=generated.pdf"
      );
      res.send(pdfBuffer);
    });

    worker.on("error", (error) => {
      console.error("Worker error:", error);
      res.status(500).send("Error generating PDF from HTML");
    });

    worker.on("exit", (code) => {
      if (code !== 0) {
        console.error(`Worker stopped with exit code ${code}`);
      }
    });
  } catch (error) {
    console.error(error);
    res.status(500).send("Error generating PDF from HTML");
  }
};
